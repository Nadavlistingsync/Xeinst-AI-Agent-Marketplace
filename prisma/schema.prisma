// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
  agent
}

enum SubscriptionTier {
  free
  basic
  premium
}

enum DeploymentStatus {
  pending
  deploying
  active
  failed
  stopped
}

enum NotificationType {
  feedback_received
  deployment_status
  system_alert
  feedback_alert
}

enum ProductStatus {
  draft
  published
  archived
}

enum ProductAccessLevel {
  public
  private
  restricted
}

enum ProductLicenseType {
  free
  commercial
  enterprise
}

enum WebEmbedStatus {
  active
  inactive
  pending
  error
}

enum WebEmbedType {
  website
  application
  dashboard
  tool
  custom
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            UserRole  @default(user)
  subscriptionTier SubscriptionTier @default(free)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  credits         Int                @default(0)
  creditTxs       CreditTransaction[]
  
  // Stripe fields
  stripeCustomerId String?
  subscriptionId   String?
  subscriptionStatus String?

  // Relations
  products        Product[]
  deployments     Deployment[] @relation("DeploymentCreator")
  deployedDeployments Deployment[] @relation("DeploymentDeployer")
  reviews         Review[]
  feedbacks       AgentFeedback[]
  purchases       Purchase[]
  earnings        Earning[]
  notifications   Notification[]
  files           File[]
  agents          Agent[]
  generatedInterfaces GeneratedInterface[]
  webEmbeds        WebEmbed[]
}

model Product {
  id              String    @id @default(cuid())
  name            String
  description     String
  fileUrl         String
  rating          Float     @default(0)
  downloadCount   Int       @default(0)
  requirements    String[]
  longDescription String?
  price           Float
  category        String
  tags            String[]
  version         String
  status          ProductStatus @default(draft)
  accessLevel     ProductAccessLevel @default(public)
  licenseType     ProductLicenseType @default(free)
  environment     String
  framework       String
  modelType       String
  createdBy       String
  earningsSplit   Float
  isPublic        Boolean   @default(true)
  uploadedBy      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  creator         User      @relation(fields: [createdBy], references: [id])
  reviews         Review[]  @relation("ProductReviews")
  purchases       Purchase[]
  earnings        Earning[]
  files           File[]
}

model Deployment {
  id              String    @id @default(cuid())
  name            String
  status          DeploymentStatus @default(pending)
  description     String
  accessLevel     String
  licenseType     String
  environment     String
  framework       String
  modelType       String
  source          String
  deployedBy      String
  createdBy       String
  rating          Float     @default(0)
  totalRatings    Int       @default(0)
  downloadCount   Int       @default(0)
  startDate       DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isPublic        Boolean   @default(true)
  version         String    @default("1.0.0")
  health          Json?     @default("{}")
  pricePerRun     Int                @default(1)
  price           Int?             @default(0)

  // Relations
  creator         User      @relation("DeploymentCreator", fields: [createdBy], references: [id])
  deployer        User      @relation("DeploymentDeployer", fields: [deployedBy], references: [id])
  feedbacks       AgentFeedback[]
  reviews         Review[]
  metrics         AgentMetrics[]
  logs            AgentLog[]

  @@index([createdBy])
  @@index([status])
}

model AgentFeedback {
  id              String    @id @default(cuid())
  rating          Int
  deploymentId    String
  userId          String
  comment         String?
  sentimentScore  Float?
  categories      Json?
  creatorResponse String?
  responseDate    DateTime?
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  deployment      Deployment @relation(fields: [deploymentId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
}

model Review {
  id              String    @id @default(cuid())
  rating          Int
  deploymentId    String
  userId          String
  productId       String?
  comment         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  deployment      Deployment @relation(fields: [deploymentId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  product         Product?  @relation("ProductReviews", fields: [productId], references: [id])
}

model Purchase {
  id              String    @id @default(cuid())
  status          String
  userId          String
  productId       String
  amount          Float
  stripeTransferId String?
  paidAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id])
  product         Product   @relation(fields: [productId], references: [id])
}

model Earning {
  id              String    @id @default(cuid())
  status          String
  userId          String
  productId       String
  amount          Decimal   @db.Decimal(10, 2)
  stripeTransferId String?
  paidAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id])
  product         Product   @relation(fields: [productId], references: [id])
}

model Notification {
  id              String    @id @default(cuid())
  type            NotificationType
  message         String
  userId          String
  read            Boolean   @default(false)
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id])
}

model AgentMetrics {
  id              String    @id @default(cuid())
  deploymentId    String
  errorRate       Float
  responseTime    Float
  successRate     Float
  totalRequests   Int
  activeUsers     Int
  averageResponseTime Float
  requestsPerMinute Float
  averageTokensUsed Float
  costPerRequest  Float
  totalCost       Float
  timestamp       DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastUpdated     DateTime  @default(now())

  // Relations
  deployment      Deployment @relation(fields: [deploymentId], references: [id])
}

model AgentLog {
  id              String    @id @default(cuid())
  deploymentId    String?
  level           String
  message         String
  metadata        Json?
  timestamp       DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  deployment      Deployment? @relation(fields: [deploymentId], references: [id])
}

model File {
  id              String    @id @default(cuid())
  name            String
  path            String
  size            Int
  type            String
  url             String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  productId       String?
  uploadedBy      String

  // Relations
  product         Product?  @relation(fields: [productId], references: [id])
  user            User      @relation(fields: [uploadedBy], references: [id])
}

model Workflow {
  id              String    @id @default(cuid())
  name            String
  description     String?
  version         String    @default("1.0.0")
  status          String    @default("draft")
  createdBy       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  versions        WorkflowVersion[]
  executions      WorkflowExecution[]
  schedules       WorkflowSchedule[]
  triggers        WorkflowTrigger[]
  webhooks        WorkflowWebhook[]
}

model WorkflowVersion {
  id              String    @id @default(cuid())
  workflowId      String
  version         String
  config          Json
  status          String    @default("draft")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  workflow        Workflow  @relation(fields: [workflowId], references: [id])
  executions      WorkflowExecution[]
}

model WorkflowExecution {
  id              String    @id @default(cuid())
  workflowId      String
  versionId       String
  status          String    @default("pending")
  input           Json?
  output          Json?
  error           String?
  startedAt       DateTime?
  completedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  workflow        Workflow  @relation(fields: [workflowId], references: [id])
  version         WorkflowVersion @relation(fields: [versionId], references: [id])
}

model WorkflowSchedule {
  id              String    @id @default(cuid())
  workflowId      String
  cronExpression  String
  timezone        String    @default("UTC")
  isActive        Boolean   @default(true)
  lastRunAt       DateTime?
  nextRunAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  workflow        Workflow  @relation(fields: [workflowId], references: [id])
}

model WorkflowTrigger {
  id              String    @id @default(cuid())
  workflowId      String
  type            String
  config          Json
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  workflow        Workflow  @relation(fields: [workflowId], references: [id])
}

model WorkflowWebhook {
  id              String    @id @default(cuid())
  workflowId      String
  url             String
  method          String    @default("POST")
  headers         Json?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  workflow        Workflow  @relation(fields: [workflowId], references: [id])
}

model Rating {
  id              String    @id @default(cuid())
  userId          String
  productId       String?
  deploymentId    String?
  score           Float
  comment         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Webhook {
  id              String    @id @default(cuid())
  url             String
  method          String    @default("POST")
  headers         Json?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Agent {
  id              String    @id @default(cuid())
  name            String
  description     String
  category        String
  price           Float
  documentation   String?
  fileUrl         String
  version         String    @default("1.0.0")
  environment     String    @default("production")
  framework       String    @default("custom")
  modelType       String    @default("custom")
  isPublic        Boolean   @default(true)
  createdBy       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  downloadCount   Int       @default(0)
  webhookUrl      String?
  config          Json?

  // Relations
  creator         User      @relation(fields: [createdBy], references: [id])
  interfaces      GeneratedInterface[]
  webEmbeds        WebEmbed[]
}

model GeneratedInterface {
  id              String    @id @default(cuid())
  agentId         String
  components      Json
  styles          String
  layout          String
  metadata        Json
  reactCode       String
  createdBy       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  agent           Agent     @relation(fields: [agentId], references: [id])
  creator         User      @relation(fields: [createdBy], references: [id])
}

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String
  type        String   // 'purchase', 'spend', 'earn', 'redeem'
  amount      Int
  agentId     String?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

model Job {
  id          String   @id @default(cuid())
  type        String
  status      String
  data        Json?
  priority    String
  createdAt   DateTime @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  error       String?
  retries     Int      @default(0)
  maxRetries  Int      @default(1)
  metadata    Json?
}

model AnalyticsSnapshot {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  data      Json
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @default(cuid())
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RateLimitLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  allowed   Boolean
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Backup {
  id        String   @id @default(cuid())
  type      String
  status    String
  size      Int
  location  String
  metadata  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String
  deploymentId String
  comment   String?
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebEmbed {
  id              String          @id @default(cuid())
  name            String
  description     String?
  url             String
  embedUrl        String          // The URL to embed (iframe src)
  type            WebEmbedType    @default(website)
  status          WebEmbedStatus  @default(active)
  createdBy       String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Embed configuration
  width           String          @default("100%")
  height          String          @default("600px")
  allowFullscreen Boolean         @default(true)
  allowScripts    Boolean         @default(false)
  sandbox         String          @default("allow-same-origin allow-scripts allow-forms allow-popups")
  
  // Agent integration
  agentId         String?         // Optional: linked agent for later integration
  agentConfig     Json?           // Configuration for agent integration
  
  // Security and permissions
  allowedDomains  String[]        @default([])
  blockedDomains  String[]        @default([])
  requireAuth     Boolean         @default(false)
  
  // Analytics
  viewCount       Int             @default(0)
  lastViewed      DateTime?
  
  // Relations
  creator         User            @relation(fields: [createdBy], references: [id])
  agent           Agent?          @relation(fields: [agentId], references: [id])
  embedLogs       WebEmbedLog[]
}

model WebEmbedLog {
  id          String      @id @default(cuid())
  embedId     String
  action      String      // 'view', 'interact', 'error'
  metadata    Json?
  timestamp   DateTime    @default(now())
  
  // Relations
  embed       WebEmbed    @relation(fields: [embedId], references: [id])
}
